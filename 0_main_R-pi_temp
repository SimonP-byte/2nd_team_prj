
#### sys lib ####
import time as tm
import threading as thrd
import serial

#### prj lib ####
import RPi.GPIO as gpio

#### my lib ####
from package import Rpi_FND_Lib_V1_0 as seg7
from package import My_Rpi_GPIO_Lib_V1_0 as io_lib
from package import My_RPi_I2C_LCD_Lib_V1_0 as lcd_lib
from package.My_STD_Lib_V1_0 import *


port = "/dev/ttyAMA3"
baud = 9600
ser = serial.Serial(port, baud)

ser.close()
ser.open()

cnt = 1234
flag = 0

def timer_thrd():
    print("thrd func...")
    
    if ser_2.readable():
        response = ser_2.readline()
        print(response)
    
    thread_1 = thrd.Timer(0.2, timer_thrd)
    thread_1.start()

def byte_send(k, g):
    ser.write(bytes(bytearray([0xCF])))
    ser.write(bytes(bytearray([k])))
    ser.write(bytes(bytearray([g])))
              

def setup():
    gpio.setwarnings(False)
    gpio.setmode(gpio.BCM)
    gpio.cleanup()
    
       
#     for i in io_lib.LED_Pin:
#         gpio.setup(i, gpio.OUT)
#     for k in seg7.FND_Pin:
#         gpio.setup(k, gpio.OUT)
    
    gpio.setup(17, gpio.OUT)
    io_lib._d_out_(17, 0)
    
#     thread_1 = thrd.Timer(0.2, timer_thrd)
#     thread_1.start()

def main():
    setup()
    try:
        while True:
            global flag
            value = [12, 0, 1, str('K'), 2, str("Park"), 3, 57, 124, 54, str('\n')]
#             ser.write(b"SRpi_TX\n")
#             ser.write("Rpi_\n".encode())
#             ser.write(bytes("Rpi_\n".encode('ascii')))
            if flag == 0:
                io_lib._d_out_(17, 1)
                ser.write(b"S00100\n")
                tm.sleep(0.01)
                io_lib._d_out_(17, 0)
            
                tm.sleep(0.3)
            
            if ser.readable():
                response = ser.readline()
                print(response)
                print(response[4])
                print(response[5])
                if response[4] == 48:
                    if response[5] == 49:
                        flag = 1
                        io_lib._d_out_(17, 1)
                        ser.write(b"S00101\n")
                        tm.sleep(0.01)
                        io_lib._d_out_(17, 0)
               
            tm.sleep(0.3)
            
            
    except KeyboardInterrupt:
        print("Ctrl + c KeyboardInterrupt")        
    finally:
        pass
        
#===============================================================

# Program Strat main
if __name__ == "__main__":
    main()

